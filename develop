#!/usr/bin/env bash

# Set environment variables for dev or CI
export APP_PORT=${APP_PORT:-80}
export DB_PORT=${DB_PORT:-3306}
export DB_ROOT_PASS=${DB_ROOT_PASS:-root}
export DB_NAME=${DB_DATABASE:-forum}
export DB_USER=${DB_USER:-forum}
export DB_PASS=${DB_PASS:-forum_pass}

# Decide which docker-compose file to use.
COMPOSE_FILE="dev"

# Disable pseudo-TTY allocation for CI (Jenkins)
TTY=""

# $BUILD_NUMBER comes from Jenkins.
if [ ! -z "$BUILD_NUMBER" ]; then
  COMPOSE_FILE="ci"
  TTY="-T"
fi

COMPOSE="docker-compose"

if [ $# -gt 0 ]; then
  if [ "$1" == "art" ]; then
    shift 1
    $COMPOSE run --rm $TTY \
      -w /var/www/html \
      app \
      php artisan "$@"

  # If "composer" is used, pass-thru to "composer"
  # inside a new container
  elif [ "$1" == "composer" ]; then
    shift 1
    $COMPOSE run --rm $TTY \
      -w /var/www/html \
      app \
      composer "$@"

  # If "test" is used, run unit tests,
  # pass-thru any extra arguments to php-unit
  elif [ "$1" == "test" ]; then
    shift 1
    $COMPOSE run --rm $TTY \
      -w /var/www/html \
      app \
      ./vendor/bin/phpunit "$@"

  elif [ "$1" == "t" ]; then
    shift 1
    $COMPOSE exec \
      app \
      sh -c "cd /var/www/html && ./vendor/bin/phpunit $@"

  # If "npm" is used, run npm
  # from our node container
  elif [ "$1" == "npm" ]; then
    shift 1
    $COMPOSE run --rm $TTY \
      -w /var/www/html \
      node \
      npm "$@"

  else
    $COMPOSE "$@"
  fi
else
  $COMPOSE ps
fi